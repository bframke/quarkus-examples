package de.code.client.common.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.google.gson.annotations.SerializedName;
import org.eclipse.microprofile.openapi.annotations.media.Schema;

import java.util.Objects;

@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(JsonInclude.Include.NON_NULL)
public class Problem {
    @SerializedName("type")
    private String type = "https://enterprise-api.pages.devops.telekom.de/api-guide";

    @SerializedName("status")
    private Integer status = null;

    @SerializedName("title")
    private String title = null;

    @SerializedName("instance")
    private String instance = null;

    @SerializedName("detail")
    private String detail = null;

    public Problem type(String type) {
        this.type = type;
        return this;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public Problem status(Integer status) {
        this.status = status;
        return this;
    }

    @Schema(description = "The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem. The \"status\" member, if present, is only advisory; it conveys the HTTP status code used for the convenience of the consumer. Generators MUST use the same status code in the actual HTTP response.")
    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    public Problem title(String title) {
        this.title = title;
        return this;
    }

    @Schema(required = true, description = "A short, human-readable summary of the problem type. Consumers SHOULD NOT automatically dereference the type URI.")
    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public Problem instance(String instance) {
        this.instance = instance;
        return this;
    }

    @Schema(description = "A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further information if dereferenced.")
    public String getInstance() {
        return instance;
    }

    public void setInstance(String instance) {
        this.instance = instance;
    }

    public Problem detail(String detail) {
        this.detail = detail;
        return this;
    }

    @Schema(description = "A human-readable explanation specific to this occurrence of the problem.  The \"detail\" member, if present, ought to focus on helping the client correct the problem, rather than giving debugging information.")
    public String getDetail() {
        return detail;
    }

    public void setDetail(String detail) {
        this.detail = detail;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Problem problem = (Problem) o;
        return Objects.equals(this.type, problem.type) &&
                Objects.equals(this.status, problem.status) &&
                Objects.equals(this.title, problem.title) &&
                Objects.equals(this.instance, problem.instance) &&
                Objects.equals(this.detail, problem.detail);
    }

    @Override
    public int hashCode() {
        return Objects.hash(type, status, title, instance, detail);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Problem {\n");

        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    title: ").append(toIndentedString(title)).append("\n");
        sb.append("    instance: ").append(toIndentedString(instance)).append("\n");
        sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
