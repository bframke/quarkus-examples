plugins {
    id 'java'
    id "ch.kk7.spawn" version "1.0.20180924200750"
    id 'com.palantir.graal' version '0.6.0-32-g68fa986'
    id 'com.palantir.docker' version '0.22.1'
    id 'com.palantir.docker-run' version '0.22.1'
    id 'io.quarkus' version "0.28.1"
}

description = 'Example Project for the Reflection Bug'
sourceCompatibility = '1.8'
version = '0.2.0'
String homeDir = System.getenv("HOME")

repositories {
    mavenLocal()
    maven { url = 'http://repo.maven.apache.org/maven2' }
    maven { url = "https://mvnrepository.com/artifact/io.quarkus/quarkus-gradle-plugin" }
}

dependencies {
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.6.1'
    compile group: 'io.kubernetes', name: 'client-java', version: '5.0.0'
    compile group: 'com.microsoft.aad', name: 'adal4j', version: '0.0.2'

    compile group: 'io.quarkus', name: 'quarkus-core-deployment', version: "${quarkusVersion}"
    compile group: 'io.quarkus', name: 'quarkus-smallrye-metrics', version: "${quarkusVersion}"
    implementation enforcedPlatform('io.quarkus:quarkus-bom:'+"${quarkusVersion}")
    implementation("io.quarkus:quarkus-resteasy")

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'io.undertow', name: 'undertow-core', version: '1.0.0.Beta12'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.1.0'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testCompile group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '2.6'

    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.8'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.8'
}

graal {
    outputName 'buggraal'
    graalVersion '19.2.1'
}

quarkus {
    String graalVersion = graal.graalVersion.get()
    buildNative.invokeMethod("setGraalvmHome", homeDir + "/.gradle/caches/com.palantir" +
            ".graal/${graalVersion}/graalvm-ce-${graalVersion}")
    buildNative.invokeMethod("setEnableJni", true)
}

docker {
    def imageVersion = version
    if(project.hasProperty("pipelineId")){
        imageVersion = pipelineId
    }
    def dockerImageName = "example.com/registry/bug-example:${imageVersion}"
    docker.setName(dockerImageName)
    dockerfile project.file('src/main/docker/Dockerfile.native')
    files project.file('src/main/docker/libsunec.so'), project.file("build/bug-example-${version}-runner")
}

dockerRun {
    def dockerImageName = "example.com/registry/bug-example:${version}"
    name 'bug-example'
    image dockerImageName
    volumes 'src/test/resources' : '/etc/config'
    env 'CONFIG_FILE_LOCATION' : '/etc/config'
    network 'host'
    clean true
}

docker.dependsOn(buildNative)
buildNative.dependsOn("installGraalVm")

buildNative.doFirst {
    String graalVersion = graal.graalVersion.get()
    dockerBuild = "quay.io/quarkus/ubi-quarkus-native-image:${graalVersion}"
    containerRuntime="docker"
    println getGraalvmHome()
}

task installGraalVm (type: Exec, dependsOn: [downloadGraalTooling, extractGraalTooling]) {
    String graalVersion = graal.graalVersion.get()
    String graalvmHome = homeDir + "/.gradle/caches/com.palantir" +
            ".graal/${graalVersion}/graalvm-ce-${graalVersion}"
    commandLine graalvmHome + "/bin/gu", "install", "native-image"
}

task buildExample (dependsOn: [buildNative]) {}

task unitTest (type: Test) {
    include '**/Test*.class'
    testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
    }
}

task saveDocker (type: Exec, dependsOn: ['docker']) {
    println('docker.name='+docker.getName())
    executable 'docker'
    args 'image', 'save', docker.getName(), '-o', "${buildDir}/bug-example-image-${version}.tar"
}

buildNative {
    additionalBuildArgs = [
            "-H:ReflectionConfigurationFiles=${buildDir}/resources/main/reflect-config.json".toString(),
            "-H:ResourceConfigurationFiles=${buildDir}/resources/main/resource-config.json".toString()
    ]
}